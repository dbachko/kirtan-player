# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: kirtan-player

plugins:
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs6.10
  memorySize: 128
  region: us-east-1
  # stage: dev

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"

# you can add packaging information here
#package:
#  exclude:
#    - exclude-me.js
#  artifact: my-service-code.zip

functions:
  skill:
    handler: handler.kirtanPlayer
    role:
      'Fn::GetAtt': [ lambdaRole, Arn ]
    events:
      - alexaSkill 

resources:
  Resources:
    lambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-${self:provider.stage}-${self:provider.region}-lambdaRole
        Path: '/'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: AmazonDynamoDBFullAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Resource: '*'
                  Action:
                    - dynamodb:*
                    - cloudwatch:DeleteAlarms
                    - cloudwatch:DescribeAlarmHistory
                    - cloudwatch:DescribeAlarms
                    - cloudwatch:DescribeAlarmsForMetric
                    - cloudwatch:GetMetricStatistics
                    - cloudwatch:ListMetrics
                    - cloudwatch:PutMetricAlarm
                    - datapipeline:ActivatePipeline
                    - datapipeline:CreatePipeline
                    - datapipeline:DeletePipeline
                    - datapipeline:DescribeObjects
                    - datapipeline:DescribePipelines
                    - datapipeline:GetPipelineDefinition
                    - datapipeline:ListPipelines
                    - datapipeline:PutPipelineDefinition
                    - datapipeline:QueryObjects
                    - iam:ListRoles
                    - sns:CreateTopic
                    - sns:DeleteTopic
                    - sns:ListSubscriptions
                    - sns:ListSubscriptionsByTopic
                    - sns:ListTopics
                    - sns:Subscribe
                    - sns:Unsubscribe
                    - sns:SetTopicAttributes
                    - lambda:CreateFunction
                    - lambda:ListFunctions
                    - lambda:ListEventSourceMappings
                    - lambda:CreateEventSourceMapping
                    - lambda:DeleteEventSourceMapping
                    - lambda:GetFunctionConfiguration
                    - lambda:DeleteFunction
          - PolicyName: CloudWatchLogsFullAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Resource: '*'
                  Action:
                    - logs:*

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
